# Generated by Django 5.0.6 on 2024-09-23 02:09

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='SoilFertility',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('region', models.CharField(max_length=100)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_of_study', models.DateField()),
                ('location', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='mapApp.location')),
            ],
        ),
        migrations.CreateModel(
            name='PhysicalProperties',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('texture', models.CharField(max_length=50)),
                ('structure', models.CharField(max_length=50)),
                ('permeability', models.FloatField()),
                ('water_retention', models.FloatField()),
                ('bulk_density', models.FloatField()),
                ('drainage', models.CharField(choices=[('very_poor', 'Muy pobremente drenado'), ('poor', 'Pobremente drenado'), ('moderate', 'Moderadamente drenado'), ('well', 'Bien drenado')], max_length=50)),
                ('soil_fertility', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='physical_properties', to='mapApp.soilfertility')),
            ],
        ),
        migrations.CreateModel(
            name='PhLevel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('ph_value', models.FloatField()),
                ('soil_fertility', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ph_level', to='mapApp.soilfertility')),
            ],
        ),
        migrations.CreateModel(
            name='OrganicMatter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('percentage', models.FloatField()),
                ('soil_fertility', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='organic_matter', to='mapApp.soilfertility')),
            ],
        ),
        migrations.CreateModel(
            name='Micronutrients',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('iron', models.FloatField()),
                ('manganese', models.FloatField()),
                ('zinc', models.FloatField()),
                ('copper', models.FloatField()),
                ('boron', models.FloatField()),
                ('molybdenum', models.FloatField()),
                ('chlorine', models.FloatField()),
                ('nickel', models.FloatField()),
                ('soil_fertility', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='micronutrients', to='mapApp.soilfertility')),
            ],
        ),
        migrations.CreateModel(
            name='Macronutrients',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('nitrogen', models.FloatField()),
                ('phosphorus', models.FloatField()),
                ('potassium', models.FloatField()),
                ('calcium', models.FloatField()),
                ('magnesium', models.FloatField()),
                ('sulfur', models.FloatField()),
                ('soil_fertility', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='macronutrients', to='mapApp.soilfertility')),
            ],
        ),
    ]
